import { Telegraf } from 'telegraf';
import singletonMonitoring from '~/storage/draft-create.js';

export const setupMonitoring = (bot: Telegraf) => {
  bot.action('root_start_monitoring', async (ctx) => {
    const validation = await singletonMonitoring.getCurrentMonitoringState();
    await ctx.answerCbQuery();

    if (!validation.valid) {
      const errorText =
        '‚ö†Ô∏è *–û—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:*\n\n' +
        validation.errors.map((e, i) => `${i + 1}. ${e}`).join('\n');
      return ctx.reply(errorText, { parse_mode: 'Markdown' });
    }

    const { cluster, warehouse, timeSlot, products } = validation.state;

    const text =
      `‚úÖ –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:\n\n` +
      `üì¶ –ö–ª–∞—Å—Ç–µ—Ä: ${cluster}\n` +
      `üè≠ –°–∫–ª–∞–¥: ${warehouse}\n` +
      `‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${timeSlot}\n\n` +
      `üßæ –¢–æ–≤–∞—Ä—ã:\n${products.join('\n')}`;

    return ctx.reply(text, {
      reply_markup: {
        inline_keyboard: [[{ text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', callback_data: 'monitoring_start' }]],
      },
    });
  });

  bot.action('monitoring_start', async (ctx) => {
    await ctx.answerCbQuery();

    try {
      const monitoring = singletonMonitoring;
      const storage = monitoring.getStorage().read();
      if (storage.status) return ctx.reply('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω');
      if (!storage.cluster_ids || !storage.drop_off_point_warehouse_id || !storage.items.length) {
        return ctx.reply('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      }

      monitoring.startMonitoring();
      await ctx.reply('üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!', { parse_mode: 'HTML' });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', err);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.');
    }
  });

  bot.action('root_stop_monitoring', async (ctx) => {
    await ctx.answerCbQuery();
    const state = singletonMonitoring.getStorage().read();

    if (!state.status) return ctx.reply('‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω!');

    return ctx.reply('–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ.', {
      reply_markup: {
        inline_keyboard: [[{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'monitoring_stop' }]],
      },
    });
  });

  bot.action('monitoring_stop', async (ctx) => {
    await ctx.answerCbQuery();
    const state = singletonMonitoring.getStorage().read();

    if (!state.status) return ctx.reply('‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω!');

    singletonMonitoring.stopMonitoring();
    return ctx.reply('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', { parse_mode: 'HTML' });
  });
};
