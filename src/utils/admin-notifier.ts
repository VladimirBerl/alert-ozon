import { ADMINS } from '~/config/admins.js';
import { bot } from '~/index.js';

interface Timeslot {
  from_in_timezone: string;
  to_in_timezone: string;
}

export class AdminNotifier {
  private admins: number[];

  constructor(admins = ADMINS) {
    this.admins = admins;
  }

  private async sendToAll(message: string, parseMode: 'HTML' | 'MarkdownV2' = 'HTML') {
    if (!this.admins.length) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return;
    }

    for (const adminId of this.admins) {
      try {
        await bot.telegram.sendMessage(adminId, message, { parse_mode: parseMode });
      } catch (err) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${adminId}:`, err);
      }
    }

    console.log(`üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${this.admins.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º`);
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
   */
  async notifyDraftCreated(operation_id: string | number, draft_id: number, timeslot: Timeslot) {
    const message = [
      `‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>`,
      ``,
      `üÜî <b>Operation ID:</b> ${operation_id}`,
      `üì¶ <b>Draft ID:</b> ${draft_id}`,
      `üïí <b>–¢–∞–π–º—Å–ª–æ—Ç:</b> ${timeslot.from_in_timezone} ‚Üí ${timeslot.to_in_timezone}`,
      ``,
      `–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`,
    ].join('\n');

    await this.sendToAll(message);
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (429)
   */
  async notifyRateLimitExceeded(errorMessage: string) {
    const message = [
      `‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤!</b>`,
      ``,
      `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`,
      `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ API: <code>${errorMessage}</code>`,
      ``,
      `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å 1‚Äì2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.`,
    ].join('\n');

    await this.sendToAll(message);
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö
   */
  async notifyError(context: string, error: unknown) {
    const message = [
      `‚ùå <b>–û—à–∏–±–∫–∞:</b> ${context}`,
      ``,
      `<pre>${error instanceof Error ? error.message : String(error)}</pre>`,
    ].join('\n');

    await this.sendToAll(message);
  }
}
